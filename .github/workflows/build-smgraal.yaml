name: Build and Use GraalVM LibGraal with SapMachine

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Set up environment variables
      shell: bash
      run: |
        echo "Setting environment variables..."
        echo "MX_GIT_CACHE=refcache" >> ${GITHUB_ENV}
        echo "MX_PATH=${{ github.workspace }}/mx" >> ${GITHUB_ENV}
        echo "MX_PYTHON=python3" >> ${GITHUB_ENV}
        echo "LANG=en_US.UTF-8" >> ${GITHUB_ENV}

    - name: Install Other Dependencies
      run: |
        echo "Installing other dependencies..."
        sudo apt-get update
        sudo apt-get install -y build-essential zlib1g-dev libffi-dev jq libasound2-dev libcups2-dev

    - name: Clone and Build SapMachine JDK from Source
      run: |
        echo "Cloning SapMachine repository..."
        git clone --branch sapmachine-21.0.4 --depth 1 https://github.com/SAP/SapMachine.git
        cd SapMachine

        echo "Setting executable permissions for configure script..."
        chmod +x ./configure  # Ensure configure is executable

        echo "Configuring and building SapMachine JDK..."
        ./configure
        make graal-builder-image

        export JAVA_HOME=$(pwd)/build/linux-x86_64-server-release/images/graal-builder-jdk
        echo "JAVA_HOME=${JAVA_HOME}" >> ${GITHUB_ENV}

    - name: Verify SapMachine JDK Installation
      run: |
        echo "Verifying SapMachine JDK installation..."
        ${JAVA_HOME}/bin/java -version  # Output SapMachine JDK version to confirm installation

    - name: Clone GraalVM Source
      run: |
        echo "Cloning GraalVM source from graalvm-community-jdk21u release vm-23.1.3..."
        git clone --depth 1 --branch vm-23.1.3 https://github.com/graalvm/graalvm-community-jdk21u.git graal

    - name: Clone mx Tool
      run: |
        echo "Cloning mx tool..."
        git clone --depth 1 https://github.com/graalvm/mx.git
        echo "$(pwd)/mx" >> $GITHUB_PATH  # Add mx to PATH for all steps

    - name: Update mx Cache
      uses: actions/cache@v4
      with:
        path: ~/.mx
        key: ${{ runner.os }}-mx-${{ hashFiles('**/suite.py') }}
        restore-keys: ${{ runner.os }}-mx-

    - name: Build GraalVM LibGraal
      shell: bash
      run: |
        echo "Building GraalVM LibGraal..."
        cd graal/vm
        export JVMCI_VERSION_CHECK="ignore"
        
        # Build libgraal with additional flags
        echo "Command: ${MX_PATH}/mx --env libgraal --java-home=${JAVA_HOME} build"
        ${MX_PATH}/mx --env libgraal --java-home=${JAVA_HOME} build
        
        # Set GRAALVM_HOME to the exact location output by graalvm-home with --env libgraal
        echo "Setting GRAALVM_HOME using graalvm-home with libgraal environment..."
        export GRAALVM_HOME=$(${MX_PATH}/mx --env libgraal --java-home=${JAVA_HOME} graalvm-home)
        echo "GRAALVM_HOME=${GRAALVM_HOME}" >> ${GITHUB_ENV}

        # Log the contents of the build directories for verification
        echo "Listing contents of GRAALVM_HOME:"
        ls -l ${GRAALVM_HOME}
        
        echo "Listing contents of GRAALVM_HOME/lib:"
        ls -altr ${GRAALVM_HOME}/lib/*

    - name: Copy libjvmcicompiler.so to SapMachine JDK
      shell: bash
      run: |
        echo "Copying libjvmcicompiler.so to the SapMachine JDK lib directory..."
        LIBGRAAL_PATH="${GITHUB_WORKSPACE}/graal/sdk/mxbuild/linux-amd64/GRAALVM_LIBGRAAL_JAVA21/graalvm-libgraal-openjdk-21.0.2+13.1/lib/libjvmcicompiler.so"
        SAP_JDK_LIB_DIR="${JAVA_HOME}/lib"
        
        if [ -f "$LIBGRAAL_PATH" ]; then
          sudo cp "$LIBGRAAL_PATH" "$SAP_JDK_LIB_DIR"
          echo "libjvmcicompiler.so successfully copied to ${SAP_JDK_LIB_DIR}"
        else
          echo "libjvmcicompiler.so not found at ${LIBGRAAL_PATH}"
          exit 1
        fi

    - name: Verify Build
      run: |
        cd graal/vm
        echo "Verifying mx version and GraalVM home..."
        echo "Command: ${MX_PATH}/mx --version"
        ${MX_PATH}/mx --version
        echo "Command: ${MX_PATH}/mx graalvm-show"
        ${MX_PATH}/mx graalvm-show
        echo "Command: ${MX_PATH}/mx graalvm-home"
        ${MX_PATH}/mx graalvm-home
        echo "Command: ls ${GRAALVM_HOME}"
        ls ${GRAALVM_HOME}
        
        echo "Command: ${GRAALVM_HOME}/bin/java -version"
        ${GRAALVM_HOME}/bin/java -version

    - name: Verify Graal JIT Usage with JVM Flags
      shell: bash
      run: |
        echo "Verifying Graal JIT usage with JVM flags..."
        echo "Command: java -XX:+UnlockExperimentalVMOptions -XX:+UseGraalJIT -XX:+PrintFlagsFinal -version"
        java \
          -XX:+UnlockExperimentalVMOptions \
          -XX:+UseGraalJIT \
          -XX:+PrintFlagsFinal \
          -version | grep -iE "UseGraalJIT|EnableJVMCI|JVMCI"

    - name: Compile and Run Microbenchmark to Test Graal JIT
      shell: bash
      continue-on-error: true  # Allow job to continue even if this step fails
      run: |
        echo "Compiling and running microbenchmark to test Graal JIT..."
        # Write a Java microbenchmark to verify Graal JIT compilation
        echo "Writing GraalJITTest.java..."
        cat <<EOF > GraalJITTest.java
        public class GraalJITTest {
            public static void main(String[] args) {
                for (int i = 0; i < 100_000; i++) {
                    compute(i);
                }
            }

            public static long compute(int x) {
                long result = 0;
                for (int i = 0; i < 10_000; i++) {
                    result += Math.sqrt(x * i);
                }
                return result;
            }
        }
        EOF

        # Compile the test
        echo "Compiling GraalJITTest.java..."
        javac GraalJITTest.java

        # Run with Graal-specific logging to verify Graal JIT usage
        echo "Running GraalJITTest with Graal JIT enabled..."
        echo "Command: java -XX:+UnlockExperimentalVMOptions -XX:+UseGraalJIT -Dgraal.PrintCompilation=true GraalJITTest"
        java \
          -XX:+UnlockExperimentalVMOptions \
          -XX:+UseGraalJIT \
          -Dgraal.PrintCompilation=true \
          GraalJITTest

    - name: Output hs_err Logs if Exist
      shell: bash
      run: |
        echo "Checking for hs_err log files..."
        for hs_err_file in ${GITHUB_WORKSPACE}/hs_err_pid*.log; do
          if [ -f "$hs_err_file" ]; then
            echo "hs_err log found: $hs_err_file"
            cat "$hs_err_file"
          else
            echo "No hs_err log files found."
          fi
        done
