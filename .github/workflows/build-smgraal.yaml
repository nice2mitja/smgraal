name: Build and Release GraalVM with Native Image and LibGraal using SapMachine

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # Ensures token can create releases and upload assets

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Set up General Environment Variables
      shell: bash
      run: |
        echo "Setting up general environment variables..."
        echo "MX_GIT_CACHE=refcache" >> ${GITHUB_ENV}
        echo "MX_PYTHON=python3" >> ${GITHUB_ENV}
        echo "LANG=en_US.UTF-8" >> ${GITHUB_ENV}

    - name: Install Other Dependencies
      run: |
        echo "Installing other dependencies..."
        sudo apt-get update
        sudo apt-get install -y build-essential zlib1g-dev libffi-dev \
                                libasound2-dev libcups2-dev \
                                libx11-dev libxext-dev \
                                libxrender-dev libxrandr-dev \
                                libxtst-dev libxt-dev \
                                libssl-dev libz-dev

    - name: Clone mx Tool and Set MX_PATH
      run: |
        echo "Cloning mx tool..."
        git clone https://github.com/graalvm/mx.git ${GITHUB_WORKSPACE}/mx
        cd ${GITHUB_WORKSPACE}/mx

        # Set MX_PATH after mx tool is available
        echo "MX_PATH=${GITHUB_WORKSPACE}/mx" >> ${GITHUB_ENV}

    - name: Check if SapMachine Artifact Exists
      id: check_sapmachine_artifact
      run: |
        echo "Checking if SapMachine build artifact exists..."
        ARTIFACT_NAME="sapmachine-${GITHUB_SHA}.tar.gz"
        ARTIFACT_PATH="/tmp/${ARTIFACT_NAME}"
        
        if [ -f "$ARTIFACT_PATH" ]; then
          echo "SapMachine build artifact found. Skipping rebuild."
          echo "SAPMACHINE_ARTIFACT_PATH=${ARTIFACT_PATH}" >> $GITHUB_ENV
        else
          echo "SapMachine build artifact not found. Proceeding with build."
          echo "SAPMACHINE_ARTIFACT_PATH=${ARTIFACT_PATH}" >> $GITHUB_ENV
        fi

    - name: Clone and Build SapMachine JDK from Source
      if: steps.check_sapmachine_artifact.outputs.SAPMACHINE_ARTIFACT_PATH == ''
      run: |
        echo "Cloning SapMachine repository..."
        git clone --branch sapmachine-21.0.5 --depth 1 https://github.com/SAP/SapMachine.git
        cd SapMachine

        echo "Setting executable permissions for configure script..."
        chmod +x ./configure

        echo "Configuring and building SapMachine JDK..."
        ./configure
        make graal-builder-image

        export JAVA_HOME=$(pwd)/build/linux-x86_64-server-release/images/graal-builder-jdk
        echo "JAVA_HOME=${JAVA_HOME}" >> ${GITHUB_ENV}

        # Creating artifact tar.gz to be reused
        echo "Creating SapMachine artifact..."
        tar -czf ${SAPMACHINE_ARTIFACT_PATH} -C $(pwd)/build/linux-x86_64-server-release/images .

        # Verifying build artifact
        echo "Verifying artifact..."
        ls -altr ${SAPMACHINE_ARTIFACT_PATH}

    - name: Upload SapMachine Build Artifact
      if: steps.check_sapmachine_artifact.outputs.SAPMACHINE_ARTIFACT_PATH == ''
      uses: actions/upload-artifact@v4
      with:
        name: sapmachine-build
        path: ${{ env.SAPMACHINE_ARTIFACT_PATH }}

    - name: Clone GraalVM Source
      run: |
        echo "Cloning GraalVM source from graalvm-community-jdk21u repository..."
        git clone https://github.com/graalvm/graalvm-community-jdk21u.git ${GITHUB_WORKSPACE}/graalvm-community-jdk21u

    - name: Build GraalVM with LibGraal and Native Image
      shell: bash
      run: |
        echo "Changing to the 'vm' directory to run 'mx'..."
        cd ${GITHUB_WORKSPACE}/graalvm-community-jdk21u/substratevm

        echo "Building GraalVM with LibGraal, Native Image, and additional components..."
        ${MX_PATH}/mx --native=native-image,lib:jvmcicompiler,lib:native-image-agent,lib:native-image-diagnostics-agent --components="Native Image,LibGraal,svml" build

        echo "Setting GRAALVM_HOME using graalvm-home with libgraal,native-image environment..."
        export GRAALVM_HOME=$(${MX_PATH}/mx --env libgraal,native-image graalvm-home)
        echo "GRAALVM_HOME=${GRAALVM_HOME}" >> ${GITHUB_ENV}

    - name: Set JAVA_HOME to GRAALVM_HOME
      run: |
        echo "Setting JAVA_HOME to GRAALVM_HOME directory..."
        export JAVA_HOME=${GRAALVM_HOME}
        echo "JAVA_HOME=${JAVA_HOME}" >> ${GITHUB_ENV}

    - name: Verify GraalVM Installation
      run: |
        echo "Verifying GraalVM installation..."
        ${JAVA_HOME}/bin/java -version

    - name: Verify Graal JIT Usage with JVM Flags
      shell: bash
      run: |
        echo "Verifying Graal JIT usage with JVM flags..."
        ${JAVA_HOME}/bin/java \
          -XX:+UnlockExperimentalVMOptions \
          -XX:+UseGraalJIT \
          -XX:+PrintFlagsFinal \
          -version | grep -iE "UseGraalJIT|EnableJVMCI|JVMCI"

    - name: Compile and Run Microbenchmark to Test Graal JIT
      shell: bash
      run: |
        echo "Compiling and running microbenchmark to test Graal JIT..."
        cat <<EOF > GraalJITTest.java
        public class GraalJITTest {
            public static void main(String[] args) {
                for (int i = 0; i < 100_000; i++) {
                    compute(i);
                }
            }

            public static long compute(int x) {
                long result = 0;
                for (int i = 0; i < 10_000; i++) {
                    result += Math.sqrt(x * i);
                }
                return result;
            }
        }
        EOF

        ${JAVA_HOME}/bin/javac GraalJITTest.java
        ${JAVA_HOME}/bin/java \
          -XX:+UnlockExperimentalVMOptions \
          -XX:+UseGraalJIT \
          -Dgraal.PrintCompilation=true \
          GraalJITTest

    - name: Verify Native Image Tool
      run: |
        echo "Verifying native-image tool installation..."
        ${JAVA_HOME}/bin/native-image --version

    - name: Test Native Image by Building Simple Application
      shell: bash
      run: |
        echo "Testing native-image by compiling a simple Java application..."

        cat <<EOF > HelloNativeImage.java
        public class HelloNativeImage {
            public static void main(String[] args) {
                System.out.println("Hello from native image!");
            }
        }
        EOF

        ${JAVA_HOME}/bin/javac HelloNativeImage.java
        ${JAVA_HOME}/bin/native-image HelloNativeImage

        echo "Running the native image executable..."
        ./hellonativeimage

    - name: Create GraalVM tar.gz Archive
      shell: bash
      run: |
        echo "Creating tar.gz archive of GraalVM with Native Image..."
        tar -czf /tmp/graalvm-build.tar.gz -C ${GRAALVM_HOME} .

    - name: Upload Artifact (GraalVM Build)
      uses: actions/upload-artifact@v4
      with:
        name: graalvm-build
        path: /tmp/graalvm-build.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download GraalVM Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: graalvm-build
        path: /tmp

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: "graalvm-release-${{ github.run_number }}"
        release_name: "GraalVM Build Release ${{ github.run_number }}"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /tmp/graalvm-build.tar.gz
        asset_name: graalvm-build.tar.gz
        asset_content_type: application/gzip
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
