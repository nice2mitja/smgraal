name: Build and Release GraalVM with Native Image and LibGraal using SapMachine

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # Ensures token can create releases and upload assets

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Set up General Environment Variables
      shell: bash
      run: |
        echo "Setting up general environment variables..."
        echo "MX_GIT_CACHE=refcache" >> ${GITHUB_ENV}
        echo "MX_PYTHON=python3" >> ${GITHUB_ENV}
        echo "LANG=en_US.UTF-8" >> ${GITHUB_ENV}

    - name: Install Other Dependencies
      run: |
        echo "Installing other dependencies..."
        sudo apt-get update
        sudo apt-get install -y build-essential zlib1g-dev libffi-dev \
                                libasound2-dev libcups2-dev \
                                libx11-dev libxext-dev \
                                libxrender-dev libxrandr-dev \
                                libxtst-dev libxt-dev \
                                libssl-dev libz-dev

    - name: Clone mx Tool and Set MX_PATH
      run: |
        echo "Cloning mx tool..."
        git clone https://github.com/graalvm/mx.git ${GITHUB_WORKSPACE}/mx
        cd ${GITHUB_WORKSPACE}/mx

        # Set MX_PATH after mx tool is available
        echo "MX_PATH=${GITHUB_WORKSPACE}/mx" >> ${GITHUB_ENV}

    - name: Check if SapMachine Artifact Exists in Release
      id: check_sapmachine_release
      run: |
        echo "Checking if SapMachine build artifact exists in GitHub release..."
        RELEASE_TAG="sapmachine-${GITHUB_SHA}"
        RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${RELEASE_TAG}"
        
        # Check if release exists
        response=$(curl -s -o /dev/null -w "%{http_code}" ${RELEASE_URL})
        
        if [ "$response" -eq 200 ]; then
          echo "Release found. Fetching asset URL for SapMachine build artifact."
          # Get the download URL for the artifact
          asset_url=$(curl -s ${RELEASE_URL} | jq -r '.assets[] | select(.name=="sapmachine-${GITHUB_SHA}.tar.gz") | .browser_download_url')
          
          if [ -n "$asset_url" ]; then
            echo "SapMachine artifact found. Setting ASSET_URL."
            echo "ASSET_URL=${asset_url}" >> $GITHUB_ENV
          else
            echo "No asset found in release. Proceeding with build."
            echo "ASSET_URL=" >> $GITHUB_ENV
          fi
        else
          echo "Release not found. Proceeding with build."
          echo "ASSET_URL=" >> $GITHUB_ENV
        fi

    - name: Clone and Build SapMachine JDK from Source
      if: ${{ env.ASSET_URL == '' }}
      run: |
        echo "Cloning SapMachine repository..."
        git clone --branch sapmachine-21.0.5 --depth 1 https://github.com/SAP/SapMachine.git
        cd SapMachine

        echo "Setting executable permissions for configure script..."
        chmod +x ./configure

        echo "Configuring and building SapMachine JDK..."
        ./configure
        make graal-builder-image

        export JAVA_HOME=$(pwd)/build/linux-x86_64-server-release/images/graal-builder-jdk
        echo "JAVA_HOME=${JAVA_HOME}" >> ${GITHUB_ENV}

        # Creating artifact tar.gz to be reused
        echo "Creating SapMachine artifact..."
        tar -czf /tmp/sapmachine-${GITHUB_SHA}.tar.gz -C $(pwd)/build/linux-x86_64-server-release/images .

        # Verifying build artifact
        echo "Verifying artifact..."
        ls -altr /tmp/sapmachine-${GITHUB_SHA}.tar.gz

    - name: Upload SapMachine Build Artifact to Release
      if: ${{ env.ASSET_URL == '' }}
      run: |
        echo "Creating new GitHub release and uploading SapMachine artifact..."
        RELEASE_TAG="sapmachine-${GITHUB_SHA}"
        RELEASE_NAME="SapMachine Build ${GITHUB_SHA}"
        # Create a new release
        release_id=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{"tag_name":"'"${RELEASE_TAG}"'","name":"'"${RELEASE_NAME}"'"}' \
          https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.id')
          
        # Upload the artifact
        curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/gzip" \
          --data-binary @/tmp/sapmachine-${GITHUB_SHA}.tar.gz \
          "https://uploads.github.com/repos/${{ github.repository }}/releases/${release_id}/assets?name=sapmachine-${GITHUB_SHA}.tar.gz"

    - name: Download SapMachine Build Artifact if Exists
      if: ${{ env.ASSET_URL != '' }}
      run: |
        echo "Downloading SapMachine build artifact from release..."
        curl -L ${{ env.ASSET_URL }} -o /tmp/sapmachine-${GITHUB_SHA}.tar.gz

    - name: Extract SapMachine Artifact
      if: ${{ env.ASSET_URL != '' }}
      run: |
        echo "Extracting SapMachine artifact..."
        mkdir -p ${GITHUB_WORKSPACE}/sapmachine
        tar -xzf /tmp/sapmachine-${GITHUB_SHA}.tar.gz -C ${GITHUB_WORKSPACE}/sapmachine

    # Remaining steps as they were originally for building GraalVM, verifying, and creating final artifacts
