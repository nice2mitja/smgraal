name: Build and Release GraalVM LibGraal with SapMachine

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # Ensures token can create releases and upload assets

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Set up General Environment Variables
      shell: bash
      run: |
        echo "Setting up general environment variables..."
        echo "MX_GIT_CACHE=refcache" >> ${GITHUB_ENV}
        echo "MX_PYTHON=python3" >> ${GITHUB_ENV}
        echo "LANG=en_US.UTF-8" >> ${GITHUB_ENV}

    - name: Install Other Dependencies
      run: |
        echo "Installing other dependencies..."
        sudo apt-get update
        sudo apt-get install -y build-essential zlib1g-dev libffi-dev \
                                libasound2-dev libcups2-dev \
                                libx11-dev libxext-dev \
                                libxrender-dev libxrandr-dev \
                                libxtst-dev libxt-dev

    - name: Clone mx Tool and Set MX_PATH
      run: |
        echo "Cloning mx tool..."
        git clone https://github.com/graalvm/mx.git ${GITHUB_WORKSPACE}/mx
        echo "MX_PATH=${GITHUB_WORKSPACE}/mx" >> ${GITHUB_ENV}

    - name: Check if SapMachine Artifact Exists in Release
      id: check_sapmachine_release
      run: |
        echo "Checking if SapMachine build artifact exists in GitHub release..."
        
        RELEASE_TAG="sapmachine-${GITHUB_SHA}"
        RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${RELEASE_TAG}"
        
        # Check if release exists and capture the response
        response=$(curl -s -w "%{http_code}" -o release_info.json ${RELEASE_URL})
        
        if [ "$response" -eq 200 ]; then
          echo "Release found. Checking for SapMachine build artifact..."
          # Extract the download URL for the artifact using jq
          asset_url=$(jq -r '.assets[] | select(.name == "sapmachine-${GITHUB_SHA}.tar.gz") | .browser_download_url' release_info.json)
          
          if [ -n "$asset_url" ]; then
            echo "Artifact URL found: $asset_url"
            echo "ASSET_URL=${asset_url}" >> $GITHUB_ENV
          else
            echo "No matching artifact found in release. Proceeding to build."
            echo "ASSET_URL=" >> $GITHUB_ENV
          fi
        else
          echo "Release not found. Proceeding to build."
          echo "ASSET_URL=" >> $GITHUB_ENV
        fi

    - name: Download SapMachine Build Artifact if Exists
      if: ${{ env.ASSET_URL != '' }}
      run: |
        echo "Downloading SapMachine build artifact from release..."
        curl -L ${{ env.ASSET_URL }} -o /tmp/sapmachine-${GITHUB_SHA}.tar.gz
        tar -xzf /tmp/sapmachine-${GITHUB_SHA}.tar.gz -C ${GITHUB_WORKSPACE}
        export JAVA_HOME=${GITHUB_WORKSPACE}/sapmachine
        echo "JAVA_HOME=${JAVA_HOME}" >> ${GITHUB_ENV}

    - name: Clone and Build SapMachine JDK from Source
      if: ${{ env.ASSET_URL == '' }}
      run: |
        echo "Cloning SapMachine repository..."
        git clone --branch sapmachine-21.0.5 --depth 1 https://github.com/SAP/SapMachine.git
        cd SapMachine

        echo "Setting executable permissions for configure script..."
        chmod +x ./configure

        echo "Configuring and building SapMachine JDK..."
        ./configure
        make graal-builder-image

        export JAVA_HOME=$(pwd)/build/linux-x86_64-server-release/images/graal-builder-jdk
        echo "JAVA_HOME=${JAVA_HOME}" >> ${GITHUB_ENV}

        echo "Creating tar.gz archive for SapMachine artifact..."
        tar -czf /tmp/sapmachine-${GITHUB_SHA}.tar.gz -C $(pwd)/build/linux-x86_64-server-release/images graal-builder-jdk

    - name: Upload SapMachine Artifact if Built
      if: ${{ env.ASSET_URL == '' }}
      uses: actions/upload-release-asset@v1
      with:
        release_id: ${{ steps.check_sapmachine_release.outputs.release_id }}
        asset_path: /tmp/sapmachine-${GITHUB_SHA}.tar.gz
        asset_name: sapmachine-${GITHUB_SHA}.tar.gz
        asset_content_type: application/gzip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify SapMachine JDK Installation
      run: |
        echo "Verifying SapMachine JDK installation..."
        ${JAVA_HOME}/bin/java -version

    - name: Clone GraalVM Source
      run: |
        echo "Cloning GraalVM source from graalvm-community-jdk21u repository..."
        git clone https://github.com/graalvm/graalvm-community-jdk21u.git ${GITHUB_WORKSPACE}/graalvm-community-jdk21u

    - name: Build GraalVM LibGraal and Native Image
      shell: bash
      run: |
        echo "Changing to the 'vm' directory to run 'mx'..."
        cd ${GITHUB_WORKSPACE}/graalvm-community-jdk21u/vm 

        echo "Building GraalVM with Native Image support..."
        ${MX_PATH}/mx --native=native-image,lib:jvmcicompiler,lib:native-image-agent,lib:native-image-diagnostics-agent --components="Native Image,LibGraal,svml" build
        
        echo "Setting GRAALVM_HOME using graalvm-home with libgraal environment..."
        export GRAALVM_HOME=$(${MX_PATH}/mx --env libgraal graalvm-home)
        echo "GRAALVM_HOME=${GRAALVM_HOME}" >> ${GITHUB_ENV}

        echo "Listing contents of GRAALVM_HOME:"
        ls -l ${GRAALVM_HOME}

    - name: Run Microbenchmark to Test Graal JIT and Native Image
      shell: bash
      run: |
        echo "Compiling and running microbenchmark to test Graal JIT..."
        cat <<EOF > GraalJITTest.java
        public class GraalJITTest {
            public static void main(String[] args) {
                for (int i = 0; i < 100_000; i++) {
                    compute(i);
                }
            }

            public static long compute(int x) {
                long result = 0;
                for (int i = 0; i < 10_000; i++) {
                    result += Math.sqrt(x * i);
                }
                return result;
            }
        }
        EOF

        ${JAVA_HOME}/bin/javac GraalJITTest.java
        ${JAVA_HOME}/bin/java -XX:+UnlockExperimentalVMOptions -XX:+UseGraalJIT -Dgraal.PrintCompilation=true GraalJITTest

    - name: Create GraalVM tar.gz Archive
      shell: bash
      run: |
        echo "Creating tar.gz archive of GraalVM..."
        tar -czf /tmp/graalvm-build.tar.gz -C ${GRAALVM_HOME} .

    - name: Upload Artifact (GraalVM Build)
      uses: actions/upload-artifact@v4
      with:
        name: graalvm-build
        path: /tmp/graalvm-build.tar.gz
