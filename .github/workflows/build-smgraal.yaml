name: Build and Release GraalVM LibGraal with SapMachine

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Set up General Environment Variables
      shell: bash
      run: |
        echo "Setting up general environment variables..."
        echo "MX_GIT_CACHE=refcache" >> ${GITHUB_ENV}
        echo "MX_PYTHON=python3" >> ${GITHUB_ENV}
        echo "LANG=en_US.UTF-8" >> ${GITHUB_ENV}

    - name: Install Other Dependencies
      run: |
        echo "Installing other dependencies..."
        sudo apt-get update
        sudo apt-get install -y build-essential zlib1g-dev libffi-dev \
                                libasound2-dev libcups2-dev \
                                libx11-dev libxext-dev \
                                libxrender-dev libxrandr-dev \
                                libxtst-dev libxt-dev

    - name: Clone mx Tool and Set MX_PATH
      run: |
        echo "Cloning mx tool..."
        git clone https://github.com/graalvm/mx.git ${GITHUB_WORKSPACE}/mx
        cd ${GITHUB_WORKSPACE}/mx

        # Set MX_PATH after mx tool is available
        echo "MX_PATH=${GITHUB_WORKSPACE}/mx" >> ${GITHUB_ENV}

    - name: Clone and Build SapMachine JDK from Source
      run: |
        echo "Cloning SapMachine repository..."
        git clone --branch sapmachine-21.0.4 --depth 1 https://github.com/SAP/SapMachine.git
        cd SapMachine

        echo "Setting executable permissions for configure script..."
        chmod +x ./configure

        echo "Configuring and building SapMachine JDK..."
        ./configure
        make graal-builder-image

        export JAVA_HOME=$(pwd)/build/linux-x86_64-server-release/images/graal-builder-jdk
        echo "JAVA_HOME=${JAVA_HOME}" >> ${GITHUB_ENV}

    - name: Verify SapMachine JDK Installation
      run: |
        echo "Verifying SapMachine JDK installation..."
        ${JAVA_HOME}/bin/java -version

    - name: Clone GraalVM Source
      run: |
        echo "Cloning GraalVM source from graalvm-community-jdk21u repository..."
        git clone https://github.com/graalvm/graalvm-community-jdk21u.git ${GITHUB_WORKSPACE}/graalvm-community-jdk21u

    - name: Build GraalVM LibGraal
      shell: bash
      run: |
        echo "Changing to the 'vm' directory to run 'mx'..."
        cd ${GITHUB_WORKSPACE}/graalvm-community-jdk21u/vm 

        echo "Building GraalVM LibGraal..."
        ${MX_PATH}/mx --env libgraal build
        
        echo "Setting GRAALVM_HOME using graalvm-home with libgraal environment..."
        export GRAALVM_HOME=$(${MX_PATH}/mx --env libgraal graalvm-home)
        echo "GRAALVM_HOME=${GRAALVM_HOME}" >> ${GITHUB_ENV}

        echo "Listing contents of GRAALVM_HOME:"
        ls -l ${GRAALVM_HOME}

        echo "Creating a tarball of the GRAALVM_HOME directory..."
        tar -czvf ${GITHUB_WORKSPACE}/graalvm-build.tar.gz -C ${GRAALVM_HOME} .

    - name: Upload GraalVM Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: graalvm-build
        path: ${GITHUB_WORKSPACE}/graalvm-build.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download GraalVM Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: graalvm-build
        path: ${GITHUB_WORKSPACE}

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "graalvm-release-${{ github.run_number }}"
        release_name: "GraalVM Build Release ${{ github.run_number }}"
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${GITHUB_WORKSPACE}/graalvm-build.tar.gz
        asset_name: graalvm-build.tar.gz
        asset_content_type: application/gzip
