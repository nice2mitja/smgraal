name: Build and Use GraalVM LibGraal with SapMachine

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Set up General Environment Variables
      shell: bash
      run: |
        echo "Setting up general environment variables..."
        echo "MX_GIT_CACHE=refcache" >> ${GITHUB_ENV}
        echo "MX_PYTHON=python3" >> ${GITHUB_ENV}
        echo "LANG=en_US.UTF-8" >> ${GITHUB_ENV}

    - name: Install Other Dependencies
      run: |
        echo "Installing other dependencies..."
        sudo apt-get update
        sudo apt-get install -y build-essential zlib1g-dev libffi-dev \
                                libasound2-dev libcups2-dev \
                                libx11-dev libxext-dev \
                                libxrender-dev libxrandr-dev \
                                libxtst-dev libxt-dev

    - name: Clone mx Tool and Set MX_PATH
      run: |
        echo "Cloning mx tool..."
        git clone https://github.com/graalvm/mx.git ${GITHUB_WORKSPACE}/mx
        cd ${GITHUB_WORKSPACE}/mx

        # Set MX_PATH after mx tool is available
        echo "MX_PATH=${GITHUB_WORKSPACE}/mx" >> ${GITHUB_ENV}

    - name: Clone GraalVM Source
      run: |
        echo "Cloning GraalVM source from graalvm-community-jdk21u repository..."
        git clone https://github.com/graalvm/graalvm-community-jdk21u.git
        cd graalvm-community-jdk21u/vm

    - name: Clone and Build SapMachine JDK from Source
      run: |
        echo "Cloning SapMachine repository..."
        git clone --branch sapmachine-21.0.4 --depth 1 https://github.com/SAP/SapMachine.git
        cd SapMachine

        echo "Setting executable permissions for configure script..."
        chmod +x ./configure  # Ensure configure is executable

        echo "Configuring and building SapMachine JDK..."
        ./configure
        make graal-builder-image

        export JAVA_HOME=$(pwd)/build/linux-x86_64-server-release/images/graal-builder-jdk
        echo "JAVA_HOME=${JAVA_HOME}" >> ${GITHUB_ENV}

    - name: Verify SapMachine JDK Installation
      run: |
        echo "Verifying SapMachine JDK installation..."
        ${JAVA_HOME}/bin/java -version  # Output SapMachine JDK version to confirm installation


    - name: Build GraalVM LibGraal
      shell: bash
      run: |
        echo "Building GraalVM LibGraal..."
        export MX_ALT_OUTPUT_ROOT=/tmp/libgraal-23.1
        cd graalvm-community-jdk21u/vm
        ${MX_PATH}/mx --env libgraal build -dependencies libjvmcicompiler.so.image
        
        # Set GRAALVM_HOME to the exact location output by graalvm-home with --env libgraal
        echo "Setting GRAALVM_HOME using graalvm-home with libgraal environment..."
        export GRAALVM_HOME=$(${MX_PATH}/mx --env libgraal graalvm-home)
        echo "GRAALVM_HOME=${GRAALVM_HOME}" >> ${GITHUB_ENV}

        # Log the contents of the build directories for verification
        echo "Listing contents of GRAALVM_HOME:"
        ls -l ${GRAALVM_HOME}
        
        echo "Listing contents of GRAALVM_HOME/lib:"
        ls -altr ${GRAALVM_HOME}/lib/*

    - name: Set JAVA_HOME to Alternative Output Directory
      run: |
        echo "Setting JAVA_HOME to alternative output directory..."
        export JAVA_HOME=${MX_ALT_OUTPUT_ROOT}/graalvm/libgraal-openjdk-21.0.2+13.1
        echo "JAVA_HOME=${JAVA_HOME}" >> ${GITHUB_ENV}

    - name: Verify Build
      run: |
        echo "Verifying Java installation in alternative build directory..."
        echo "Command: ${JAVA_HOME}/bin/java -version"
        ${JAVA_HOME}/bin/java -version

    - name: Verify Graal JIT Usage with JVM Flags
      shell: bash
      run: |
        echo "Verifying Graal JIT usage with JVM flags..."
        echo "Command: ${JAVA_HOME}/bin/java -XX:+UnlockExperimentalVMOptions -XX:+UseGraalJIT -XX:+PrintFlagsFinal -version"
        ${JAVA_HOME}/bin/java \
          -XX:+UnlockExperimentalVMOptions \
          -XX:+UseGraalJIT \
          -XX:+PrintFlagsFinal \
          -version | grep -iE "UseGraalJIT|EnableJVMCI|JVMCI"

    - name: Compile and Run Microbenchmark to Test Graal JIT
      shell: bash
      continue-on-error: true  # Allow job to continue even if this step fails
      run: |
        echo "Compiling and running microbenchmark to test Graal JIT..."
        # Write a Java microbenchmark to verify Graal JIT compilation
        echo "Writing GraalJITTest.java..."
        cat <<EOF > GraalJITTest.java
        public class GraalJITTest {
            public static void main(String[] args) {
                for (int i = 0; i < 100_000; i++) {
                    compute(i);
                }
            }

            public static long compute(int x) {
                long result = 0;
                for (int i = 0; i < 10_000; i++) {
                    result += Math.sqrt(x * i);
                }
                return result;
            }
        }
        EOF

        # Compile the test
        echo "Compiling GraalJITTest.java..."
        ${JAVA_HOME}/bin/javac GraalJITTest.java

        # Run with Graal-specific logging to verify Graal JIT usage
        echo "Running GraalJITTest with Graal JIT enabled..."
        echo "Command: ${JAVA_HOME}/bin/java -XX:+UnlockExperimentalVMOptions -XX:+UseGraalJIT -Dgraal.PrintCompilation=true GraalJITTest"
        ${JAVA_HOME}/bin/java \
          -XX:+UnlockExperimentalVMOptions \
          -XX:+UseGraalJIT \
          -Dgraal.PrintCompilation=true \
          GraalJITTest

    - name: Output hs_err Logs if Exist
      shell: bash
      run: |
        echo "Checking for hs_err log files..."
        for hs_err_file in ${GITHUB_WORKSPACE}/hs_err_pid*.log; do
          if [ -f "$hs_err_file" ]; then
            echo "hs_err log found: $hs_err_file"
            cat "$hs_err_file"
          else
            echo "No hs_err log files found."
          fi
        done
